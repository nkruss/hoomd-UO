import math
kinetic_energy = [292.3778325662911, 1315.3165472769576, 815.7298701393679, 1879.2546026646698, 1677.4152440343623, 2236.4245788376884, 2534.52168032115, 2028.542935491387, 4271.049090817132, 3323.7455238368952, 3702.587028330146, 5176.449610129888, 3830.4674135910714, 6017.079926560207, 8113.096308301944, 3242.3598532041283, 7884.51607264153, 6341.930343183209, 3492.3978630011193, 10148.356872560986, 2273.684613391809, 9365.980513831537, 6262.861548380665, 4805.748611615885, 10832.20899286, 2586.878048687327, 12512.99618328479, 4101.760159832245, 7846.967683876816, 9050.165629024754, 3620.8531878642857, 13493.077285561681, 3219.8553908286995, 13951.965639966487, 6991.053562540801, 8715.438285714237, 14476.776046029981, 4539.780835484192, 18259.13814319719, 4760.413646543928, 15076.038919406388, 11165.688994625853, 9146.35805715177, 19891.152325690808, 3357.4435400939064, 22700.110522187057, 6747.0226775182, 13881.427015416391, 17261.12136200662, 4597.173501663288, 23475.86343654437, 3551.9064911794303, 18369.28369606929, 11470.51001007281, 9072.970763305093, 21024.28755053275, 2830.5582963832608, 20483.54882041084, 6499.977085178074, 12336.59830306467, 15416.819372322208, 5094.813923621875, 20644.051402040357, 3892.3607679374372, 17692.283280151, 10528.644421623358, 9844.591776385883, 18739.19112122589, 4275.8458110674865, 20026.018078651494, 5840.114334937209, 15051.870344957286, 14038.148630813343, 6827.71329335419, 21176.06688009884, 3836.717638249014, 17562.42230424578, 10545.136990237885, 8671.459555310705, 17176.70954302047, 4017.345977646067, 16068.804325470255, 6989.934094491115, 10444.040619528148, 12462.232670643774, 4849.124239224902, 14378.716189092558, 4869.693228522731, 10304.924722296277, 8231.403954419531, 5847.938376910191, 12122.817401920547, 3764.985878412007, 11453.553069054056, 6206.040381073036, 7565.925484068878, 11202.553998160001, 3952.867302311677, 11988.64812217989, 4648.8587240625475, 9132.02066450011, 8966.07089333052, 4754.8776588881765, 12958.726760037101, 3369.7825039058366, 10826.483032228518, 8120.8814406283045, 4884.411740185321, 12202.715510883023, 2616.9093301970083, 10334.477929540786, 6191.871944327058, 5204.182888624478, 10336.201970294755, 2502.0081996696767, 11025.785206320066, 4685.8184203100145, 6156.988747788292, 8657.624577083317, 2779.1026080498254, 10761.239549746584, 3030.614070132639, 8082.081380692488, 6959.041035379897, 4313.685562443889, 11554.289987814458, 2326.566155463985, 10987.161551474477, 5776.191103452527, 6218.362836670388, 10607.377132659038, 2980.4008673027597, 12969.578700136884, 4140.361887938002, 9773.281034791597, 10144.449170176818, 4025.2411667874026, 15155.826238276584, 2768.4441736679055, 11987.46454327839, 8749.60895992305, 5162.879781529009, 14610.89385992831, 2191.2203557400944, 14839.573526374432, 6461.1488325004475, 8184.920433475641, 13843.385995869801, 2194.4653425021047, 16009.700143037766, 3969.287055625427, 10864.614221313437, 10773.515633551393, 4333.20802135225, 16283.990084312014, 2458.2415090227582, 15625.027693557351, 7570.2250895071775, 7864.204234920169, 15014.603429693612, 2901.623961604559, 17704.806931501378, 4452.496804371089, 12737.916763756615, 12280.149127978879, 5260.6627282088475, 19355.970712883263, 2444.8291237622393, 16148.641554086602, 9450.987753592326, 7496.046635868577, 17189.043603857343, 2114.63932509844, 18091.504055674974, 5911.240633347637, 11442.815381494383, 14223.694186937319, 3189.5470861156828, 18034.247196500917, 3583.810586325694, 13436.340556965986, 9756.116262866622, 5974.7828083397235, 15911.952982890967, 2828.0096033789423, 16635.298652128844, 6455.495105759793, 9388.13378297617, 13790.432159112592, 3609.635388329435, 16713.35398431768, 3999.5501129676177, 12611.083315488366, 10416.463846944862, 5935.582527460301, 16544.14713262437, 2958.5710012977006, 14971.939166532911, 8521.33902138955]

times = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000, 5100, 5200, 5300, 5400, 5500, 5600, 5700, 5800, 5900, 6000, 6100, 6200, 6300, 6400, 6500, 6600, 6700, 6800, 6900, 7000, 7100, 7200, 7300, 7400, 7500, 7600, 7700, 7800, 7900, 8000, 8100, 8200, 8300, 8400, 8500, 8600, 8700, 8800, 8900, 9000, 9100, 9200, 9300, 9400, 9500, 9600, 9700, 9800, 9900, 10000, 10100, 10200, 10300, 10400, 10500, 10600, 10700, 10800, 10900, 11000, 11100, 11200, 11300, 11400, 11500, 11600, 11700, 11800, 11900, 12000, 12100, 12200, 12300, 12400, 12500, 12600, 12700, 12800, 12900, 13000, 13100, 13200, 13300, 13400, 13500, 13600, 13700, 13800, 13900, 14000, 14100, 14200, 14300, 14400, 14500, 14600, 14700, 14800, 14900, 15000, 15100, 15200, 15300, 15400, 15500, 15600, 15700, 15800, 15900, 16000, 16100, 16200, 16300, 16400, 16500, 16600, 16700, 16800, 16900, 17000, 17100, 17200, 17300, 17400, 17500, 17600, 17700, 17800, 17900, 18000, 18100, 18200, 18300, 18400, 18500, 18600, 18700, 18800, 18900, 19000, 19100, 19200, 19300, 19400, 19500, 19600, 19700, 19800, 19900]

#last_step = 194
kinetic_energy = [10,20,30,40,50,60,70,80,90,100]
times = [1,2,3,4,5,6,7,8,9,10]
last_step = 6

def avg(quantity: list, time: list, start=0, finish=-1):
    '''
    Calculates the mean value of the numbers in a list (quantity) over a some number of timesteps,
    by using the sum function to get a sum of the list and then
    deviding that by the number of timesteps

    '''
    if quantity == []: #checks for an empty list
        return 0.
    #print(start, finish, quantity)
    print(quantity[start:])
    quantitySum = math.fsum(quantity[start:-1])
    print(quantitySum)
    #print(time[finish], time[start])
    timeSum = time[finish] - time[start]
    #timeSum = finish - start
    #print(timeSum)
    mean = quantitySum/timeSum
    return mean

avg1 = avg(kinetic_energy, times, start=last_step)
print(f"average of function = {avg1}")

kinetic_sum = 0
for energy in kinetic_energy[last_step, -1 + 1]:
    kinetic_sum += energy
print(kinetic_sum)
avg2 = kinetic_sum / (times[-1] - times[last_step])


print(f"average of for loop = {avg2}")
